#!/usr/bin/env python3

import os, time, random, math
import pygame
import wasm3

print("WebAssembly demo file provided by Ben Smith (binji)")
print("Sources: https://github.com/binji/raw-wasm")

scriptpath = os.path.dirname(os.path.realpath(__file__))
wasm_fn = os.path.join(scriptpath, "./wasm/chip8.wasm")

# Prepare Wasm3 engine

env = wasm3.Environment()
rt = env.new_runtime(1024)
with open(wasm_fn, "rb") as f:
    mod = env.parse_module(f.read())
    rt.load(mod)
    mod.link_function("Math", "random", "f()", random.random)

wasm_run = rt.find_function("run")
mem = rt.get_memory(0)

# Load CHIP-8 ROM

rom = bytes([
    0x63, 0x07, 0xc1, 0xff, 0xa2, 0x6c, 0xf1, 0x1e, 0xf0, 0x65, 0x40, 0x00,
    0x12, 0x02, 0x84, 0x00, 0xc5, 0x1f, 0xa2, 0x4c, 0xf5, 0x1e, 0xf0, 0x65,
    0xc8, 0x03, 0x48, 0x00, 0x12, 0x26, 0x86, 0x40, 0x86, 0x02, 0x46, 0x00,
    0x12, 0x02, 0xa3, 0x6c, 0x80, 0x60, 0xf0, 0x55, 0x84, 0x63, 0xa2, 0x6c,
    0xf1, 0x1e, 0x80, 0x40, 0xf0, 0x55, 0xa3, 0x6c, 0x82, 0x10, 0x81, 0x32,
    0x81, 0x1e, 0x81, 0x1e, 0x81, 0x1e, 0x82, 0x26, 0x82, 0x26, 0x82, 0x26,
    0xd1, 0x21, 0x12, 0x02, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x81,
    0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xc1, 0x83, 0x0f, 0x1e, 0x3c, 0x78,
    0xf0, 0xe1, 0xc3, 0x87, 0x1f, 0x3e, 0x7c, 0xf8, 0xf1, 0xe3, 0xc7, 0x8f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x02, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x1f, 0xf8,
    0x67, 0xcf, 0x13, 0x3f, 0xfc, 0x84, 0x0f, 0xf9, 0xa7, 0x8e, 0x73, 0x7f,
    0xf8, 0x68, 0x0f, 0xf9, 0xa7, 0x96, 0x70, 0xff, 0xf8, 0x18, 0x13, 0xf8,
    0x67, 0x36, 0x70, 0xff, 0xf0, 0x04, 0x21, 0xf9, 0xa7, 0x02, 0x73, 0x7f,
    0xe0, 0x02, 0x40, 0xf8, 0x21, 0x3a, 0x73, 0x3f, 0xc0, 0x02, 0x81, 0xf8,
    0x61, 0x3b, 0x13, 0x3f, 0xc0, 0x43, 0x02, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0x80, 0xfe, 0x04, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x08, 0x39,
    0xc9, 0xd0, 0xc3, 0xff, 0xc0, 0x3f, 0x90, 0x79, 0xc9, 0xd3, 0x9f, 0xff,
    0xc0, 0x0f, 0xe0, 0xf9, 0xc9, 0xd3, 0x9f, 0xff, 0xe0, 0x07, 0xe1, 0x79,
    0xcc, 0xb0, 0xc7, 0xff, 0xf0, 0x03, 0x12, 0x79, 0xcc, 0xb3, 0xe3, 0xff,
    0xf8, 0x03, 0x0c, 0xf8, 0x4e, 0x70, 0x87, 0xff, 0xfc, 0x03, 0x00, 0xf8,
    0x4e, 0x70, 0x87, 0xff, 0xfc, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x01, 0xf9,
    0xce, 0x61, 0x08, 0x47, 0xff, 0x00, 0x03, 0xf9, 0xcc, 0x61, 0x09, 0xc3,
    0xff, 0x80, 0x03, 0xf8, 0x4c, 0xb3, 0x99, 0xcb, 0xff, 0x80, 0x07, 0xf8,
    0x09, 0xb3, 0x98, 0x43, 0xff, 0x07, 0x87, 0xf9, 0x28, 0x13, 0x99, 0xc7,
    0xff, 0x03, 0x87, 0xf9, 0x29, 0xd3, 0x98, 0x43, 0xff, 0x01, 0x07, 0xf9,
    0xe9, 0xd3, 0x98, 0x49, 0xff, 0x01, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x01, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x07, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x00
])

mem[0x200:0x200+len(rom)] = rom

# Map memory region to an RGBA image

img_base = 0x1000
img_size = (64, 32)
(img_w, img_h) = img_size
region = mem[img_base : img_base + (img_w * img_h * 4)]
img = pygame.image.frombuffer(region, img_size, "RGBA")

# Prepare PyGame

scr_size = (img_w*8, img_h*8)
pygame.init()
surface = pygame.display.set_mode(scr_size)
pygame.display.set_caption("Wasm3 CHIP-8")
white = (255, 255, 255)

clock = pygame.time.Clock()

while True:
    # Process input
    for event in pygame.event.get():
        if (event.type == pygame.QUIT or
            (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE)):
            pygame.quit()
            quit()

    # TODO: input support
    #mem[10] = 0

    # Render next frame
    wasm_run(500)

    # Image output
    img_scaled = pygame.transform.scale(img, scr_size)
    surface.fill(white)
    surface.blit(img_scaled, (0, 0))
    pygame.display.flip()

    # Stabilize FPS
    clock.tick(60)
